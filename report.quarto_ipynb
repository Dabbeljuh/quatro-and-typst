{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "author: \"J. W.\"\n",
        "title: \"Reports With Quarto\"\n",
        "subtitle: \"Testing Stuff\"\n",
        "date: \"2025-03-12\"\n",
        "echo: False\n",
        "css: styles.css\n",
        "\n",
        "format: \n",
        "    pdf:\n",
        "        documentclass: report \n",
        "        margin-left: 30mm\n",
        "        margin-right: 30mm\n",
        "    # docx: default\n",
        "\n",
        "toc: true\n",
        "# format: revealjs #rendering presentation\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "# Report from already generated Image\n",
        "\n",
        "![Alt text](Coach%20Example/pics/plot_barbell_chart_v1.png)\n",
        "\n",
        "# Report from Python Code\n"
      ],
      "id": "ca5bb6fd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import matplotlib.colors as mcolors\n",
        "import textwrap\n",
        "\n",
        "\n",
        "# Sample data for the Facettenrad\n",
        "data = {\n",
        "    \"Facets\": [\n",
        "        \"Originalität\",\n",
        "        \"Intellekt\",\n",
        "        \"Offenheit für Gefühle\",\n",
        "        \"Wissbegierde\",\n",
        "        \"Streben nach Erkenntnis\",\n",
        "        \"Offenheit für Kunst\",\n",
        "        \"Belesenheit\",\n",
        "        \"Urteilskraft\",\n",
        "        \"Offenheit für Aktivitäten\",\n",
        "    ],\n",
        "    \"Values\": [5, 5, 4, 4, 3, 2, 3, 3, 3],\n",
        "    \"Explanations\": [\n",
        "        \"raffiniert, einfallsreich, durchdacht\",\n",
        "        \"clever, überzeugt von eigner Auffassungsgabe\",\n",
        "        \"offener, bewusster Umgang mit Gefühlen\",\n",
        "        \"wissbegierig, hat Freude daran, etwas Neues zu erlernen\",\n",
        "        \"analysiert und reflektiert gerne\",\n",
        "        \"kunstinteressiert\",\n",
        "        \"interessiert an Literatur\",\n",
        "        \"Vermittler*in bei Problemen, objektiv, offen\",\n",
        "        \"weltoffen, kreativ, aktiv, interessiert\",\n",
        "    ],\n",
        "}\n",
        "\n",
        "# Convert the data into a DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Number of variables we're plotting\n",
        "num_vars = len(df)\n",
        "\n",
        "# Compute the angle of each facet on the polar chart\n",
        "angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n",
        "angles += angles[:1]  # Repeat the first angle to close the circle\n",
        "\n",
        "# Set up the figure size\n",
        "fig = plt.figure(figsize=(12, 12))\n",
        "\n",
        "# Create an inset axes for the polar plot\n",
        "ax = fig.add_axes([0.15, 0.15, 0.7, 0.7], polar=True)  # Adjusted inset axes\n",
        "\n",
        "# Rotate the chart so the first entry is slightly more to the left\n",
        "ax.set_theta_offset(np.pi / 2.5)  # Adjust this value to change the rotation\n",
        "\n",
        "# Draw one axis per variable + add labels\n",
        "ax.set_theta_direction(-1)\n",
        "\n",
        "# Base color\n",
        "base_color = \"#FF1919\"  # Slightly darker red\n",
        "cmap = mcolors.LinearSegmentedColormap.from_list(\n",
        "    \"custom_red_gradient\", [\"white\", base_color]\n",
        ")\n",
        "\n",
        "# Normalize the values to map to colormap\n",
        "norm = mcolors.Normalize(vmin=0, vmax=3.5)\n",
        "\n",
        "# Create bars with gradient segments\n",
        "for i in range(num_vars):\n",
        "    value = df[\"Values\"][i]\n",
        "    for j in range(1, value + 1):\n",
        "        bars = ax.bar(\n",
        "            angles[i],\n",
        "            1,\n",
        "            width=2 * np.pi / num_vars,\n",
        "            bottom=j - 1,  # Position the bar segment correctly\n",
        "            edgecolor=\"white\",  # Customize the edge color\n",
        "            linestyle=\"-\",  # Customize the line style\n",
        "            linewidth=1,  # Customize the line width\n",
        "            alpha=0.9,\n",
        "            color=cmap(norm(j)),  # Color the bars based on gradient\n",
        "        )\n",
        "\n",
        "\n",
        "# Function to wrap text without splitting words\n",
        "def wrap_text(text, width):\n",
        "    return \"\\n\".join(textwrap.wrap(text, width=width, break_long_words=False))\n",
        "\n",
        "\n",
        "# Manually position the labels\n",
        "for i, angle in enumerate(angles[:-1]):\n",
        "    facet = df[\"Facets\"][i].replace(\" \", \"~\")  # Add non-breaking spaces\n",
        "    explanation = df[\"Explanations\"][i]\n",
        "\n",
        "    # Combine facet and explanation with extra newlines\n",
        "    combined_text = f\"$\\\\bf{{{facet}}}$\\n\\n{wrap_text(explanation, 25)}\"\n",
        "\n",
        "    ax.annotate(\n",
        "        combined_text,\n",
        "        xy=(angle, 7.5),\n",
        "        xytext=(angle, 7),  # Adjusted this value to move the annotations up\n",
        "        textcoords=\"data\",\n",
        "        ha=\"center\",\n",
        "        va=\"center\",\n",
        "        fontsize=10,\n",
        "        bbox=dict(\n",
        "            boxstyle=\"round,pad=0.3\", edgecolor=\"none\", facecolor=\"white\", alpha=0.6\n",
        "        ),\n",
        "    )\n",
        "\n",
        "\n",
        "# Set the range for radial axis\n",
        "ax.set_ylim(0, 8)\n",
        "\n",
        "# Hide radial (straight) grid lines and labels\n",
        "ax.set_yticklabels([])  # Hide the radial labels and lines\n",
        "ax.set_yticks([])  # Hide the radial tick marks\n",
        "\n",
        "# Remove degree labels on theta axis\n",
        "ax.set_xticklabels([])  # Hide the theta tick labels\n",
        "\n",
        "# Optionally, you can also hide the radial lines by setting their visibility\n",
        "for spine in ax.spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "# Customize the grid (keep circular lines visible if desired)\n",
        "ax.grid(\n",
        "    color=\"lightgrey\", linestyle=\"-\", linewidth=0.3, axis=\"y\"\n",
        ")  # Customize circular grid lines\n",
        "ax.grid(False, axis=\"x\")  # Hide straight radial grid lines\n",
        "\n",
        "# Extend the lines between segments further outward\n",
        "end_x = 8  # Increase this value to extend the lines further\n",
        "for i, angle in enumerate(angles[:-1]):\n",
        "    line_angle = angle + np.pi  # Adjust the angle to align with segment borders\n",
        "    ax.plot(\n",
        "        [line_angle, line_angle],\n",
        "        [0, end_x],\n",
        "        color=\"lightgrey\",\n",
        "        linestyle=\"-\",\n",
        "        linewidth=1,\n",
        "        alpha=0.6,\n",
        "    )\n",
        "\n",
        "# Add radial ticks manually to reflect 0-5 range\n",
        "ax.set_yticks([1, 2, 3, 4, 5])  # Define your tick positions based on the desired range\n",
        "\n",
        "# Add title\n",
        "fig.suptitle(\"Facettenrad: Offenheit\", fontsize=13, y=0.90, x=0.477, fontweight=\"bold\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "01e6f032",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "random text here\n",
        "\n",
        "![Left aligned Figure](Coach%20Example/pics\\plot_diverging_barplot_vs_average.png){fig-align=\"left\" width=\"453\"}\n",
        "\n",
        "## Another subtitle\n",
        "\n",
        "Some more random text here\n",
        "\n",
        "### A third subtitle\n",
        "\n",
        "::: {layout=\"[[30, 70], [100]]\"}\n",
        "This is a test about line up pictures next to text. This is a test about line up pictures next to text. This is a test about line up pictures next to text.\n",
        "\n",
        "![Alt text](Coach%20Example/pics/plot_boxplot.png){fig-align=\"right\" width=\"400\"}\n",
        ":::\n",
        "\n",
        "### Python Testing\n"
      ],
      "id": "355597a5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "test = 'PYTHON TESTING'\n",
        "print(test)"
      ],
      "id": "b1a071ec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Python Inline Example\n"
      ],
      "id": "d4d8a9f1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Example DataFrame\n",
        "data = {'title': ['Inception'],\n",
        "        'overview': ['A thief who steals corporate secrets through the use of dream-sharing technology '\n",
        "                     'is given the inverse task of planting an idea into the mind of a CEO.']}\n",
        "movie = pd.DataFrame(data)"
      ],
      "id": "95a79a76",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Title**: `{python} movie['title'].values[0]`\n",
        "\n",
        "**Description**: `{python} movie['overview'].values[0]`\n",
        "\n",
        "\n",
        "{{< pagebreak >}}\n",
        "\n",
        "\n",
        "## Text in columns\n",
        "\n",
        ":::::: {layout=\"[0.4,0.2, 0.4]\"}\n",
        "::: {#first-column}\n",
        "Here is some text in the first column. Here is some text in the first column. Here is some text in the first column. Here is some text in the first column. Here is some text in the first column.\n",
        ":::\n",
        "\n",
        "::: {#second-coulmn}\n",
        ":::\n",
        "\n",
        "::: {#third-column .flushright data-latex=\"\"}\n",
        "Here is some text in the second column. Here is some text in the second column. Here is some text in the second column. Here is some text in the second column. Here is some text in the second column.\n",
        ":::\n",
        "::::::\n",
        "\n",
        "| Col1 | Col2 | Col3 |\n",
        "|------|------|------|\n",
        "|      |      |      |\n",
        "|      |      |      |\n",
        "|      |      |      |\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "::: {.callout-important appearance=\"simple\"}\n",
        "## testing stuff\n",
        "\n",
        "testing the callout important\n",
        ":::"
      ],
      "id": "2787b0a2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\JosephWiesemeier\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}